<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <profiles>
    <profile>
      <id>win32</id>
      <activation>
        <os>
          <family>windows</family>
          <arch>x86</arch>
        </os>
      </activation>
      <properties>
        <win32/>
        <my.family>win32</my.family>
        <exe>.exe</exe>
        <GCC_VERSION>-vc90</GCC_VERSION>
        <MAKE_EXECUTABLE>nmake</MAKE_EXECUTABLE>
        <CMAKE_MAKE_PROGRAM>"NMake Makefiles"</CMAKE_MAKE_PROGRAM>
      </properties>
    </profile>
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <name>Linux</name>
          <family>unix</family>
        </os>
      </activation>
      <properties>
        <my.family>linux</my.family>
        <exe></exe>
        <GCC_VERSION>-gcc41</GCC_VERSION>
        <MAKE_EXECUTABLE>make</MAKE_EXECUTABLE>
        <CMAKE_MAKE_PROGRAM>'Unix Makefiles'</CMAKE_MAKE_PROGRAM>
      </properties>
    </profile>
    <profile>
      <id>macosx</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <my.family>mac</my.family>
        <exe></exe>
        <MAKE_EXECUTABLE>make</MAKE_EXECUTABLE>
        <GCC_VERSION>-xgcc40</GCC_VERSION>
        <CMAKE_MAKE_PROGRAM>'Unix Makefiles'</CMAKE_MAKE_PROGRAM>
        <!--<CMAKE_MAKE_PROGRAM>Xcode</CMAKE_MAKE_PROGRAM>-->
      </properties>
    </profile>
    <profile>
      <id>solaris</id>
      <activation>
        <os>
          <name>Solaris</name>
          <family>unix</family>
        </os>
      </activation>
      <properties>
        <my.family>solaris</my.family>
        <CMAKE_MAKE_PROGRAM>"Unix Makefiles"</CMAKE_MAKE_PROGRAM>
      </properties>
    </profile>
    <profile>
      <activation>
        <property>
          <name>build_type</name>
          <value>release</value>
        </property>
      </activation>
      <properties>
        <ftp_upload/>
      </properties>
    </profile>                                              
  </profiles>
  <!--
  <parent>
    <artifactId>JHive</artifactId>
    <groupId>org.esb.jhive</groupId>
    <version>0.1.0</version>
  </parent>-->
  <groupId>nightly</groupId>
  <artifactId>mhive</artifactId>
  <version>0.0.4.9</version>
  <name></name>
  <url>http://maven.apache.org</url>
  <repositories>
    <repository>
      <id>esb-repo</id>
      <url>http://codergrid.de/repository</url>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>ftp-repository</id>
      <url>ftp://codergrid.de</url>
    </repository>
  </distributionManagement>
                        
  <build>
    <extensions>
      <!-- Enabling the use of FTP -->
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-ftp</artifactId>
        <version>1.0-beta-6</version>
      </extension>
    </extensions>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <phase>compile</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includeTypes>zip</includeTypes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.4</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-junit</artifactId>
            <version>1.8.1</version>
          </dependency>
           <dependency>
             <groupId>commons-net</groupId>
             <artifactId>commons-net</artifactId>
             <version>1.4.1</version>
           </dependency>
           <dependency>
             <groupId>ant</groupId>
             <artifactId>ant-commons-net</artifactId>
             <version>1.6.5</version>
           </dependency>
           <dependency>
             <groupId>ant</groupId>
             <artifactId>ant-nodeps</artifactId>
             <version>1.6.5</version>
           </dependency>
        </dependencies>
        <executions>
          <execution>
            <phase>clean</phase>
            <id>clean</id>
            <configuration>
              <tasks>
                <exec executable="${MAKE_EXECUTABLE}" dir="${project.basedir}/build" failonerror="no">
                  <arg line="clean"/>
                </exec>
                <exec executable="rm" dir="${project.basedir}" failonerror="no">
                  <arg line=" -rf build"/>
                </exec>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <phase>compile</phase>
            <id>dowload-support</id>
            <configuration>
              <tasks if="win32">
                <get src="http://codergrid.de/repository/inttypes/inttypes.h" dest="${project.build.directory}/dependency/include" verbose="true" usetimestamp="true"/>
                <get src="http://codergrid.de/repository/inttypes/stdint.h" dest="${project.build.directory}/dependency/include" verbose="true" usetimestamp="true"/>

	        <!--<copy file="${project.build.directory}/dependency/lib/libcurl.dll.a" tofile="${project.build.directory}/dependency/lib/libcurl.dll.lib"/>-->
                <copy file="${project.build.directory}/dependency/lib/libsqlite3.a" tofile="${project.build.directory}/dependency/lib/libsqlite3.lib"/>

                <copy file="${project.build.directory}/dependency/lib/wtd.lib" tofile="${project.build.directory}/dependency/lib/wt.lib" failonerror="no"/>
                <copy file="${project.build.directory}/dependency/lib/wtextd.lib" tofile="${project.build.directory}/dependency/lib/wtext.lib" failonerror="no"/>
                <copy file="${project.build.directory}/dependency/lib/wthttpd.lib" tofile="${project.build.directory}/dependency/lib/wthttp.lib" failonerror="no"/>

                <copy file="${project.build.directory}/dependency/lib/litesqld.lib" tofile="${project.build.directory}/dependency/lib/litesql.lib" failonerror="no"/>
                <copy file="${project.build.directory}/dependency/lib/litesql_sqlited.lib" tofile="${project.build.directory}/dependency/lib/litesql_sqlite.lib" failonerror="no"/>
                <copy file="${project.build.directory}/dependency/lib/litesql-utild.lib" tofile="${project.build.directory}/dependency/lib/litesql-util.lib" failonerror="no"/>

                <copy file="${project.build.directory}/dependency/lib/log4cplusd.lib" tofile="${project.build.directory}/dependency/lib/log4cplus.lib" failonerror="no"/>
                <copy file="${project.build.directory}/dependency/lib/libjson.a" tofile="${project.build.directory}/dependency/lib/libjson.lib" failonerror="no"/>

              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <phase>compile</phase>
            <id>dowload-rapidxml</id>
            <configuration>
              <tasks>
                <get src="http://downloads.sourceforge.net/project/rapidxml/rapidxml/rapidxml%201.13/rapidxml-1.13.zip" dest="${project.build.directory}/dependency/" verbose="true" usetimestamp="true"/>
                <unzip src="${project.build.directory}/dependency/rapidxml-1.13.zip" dest="${project.build.directory}/dependency/include"/>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <phase>compile</phase>
            <id>compile</id>
            <configuration>
              <tasks>

                <mkdir dir="build"/>
                <mkdir dir="build_xcode"/>
                
                
                <exec executable="cmake" dir="${project.basedir}/build" failonerror="yes">
                  <arg line="-G ${CMAKE_MAKE_PROGRAM}
                    -DCMAKE_INSTALL_PREFIX=${project.basedir}/install
                    -DCMAKE_BUILD_TYPE=${build_type}
                    -DSHARED_LIBS=Off
                    -DCMAKE_OSX_ARCHITECTURES=i386
                    -DBOOST_DIR=${project.build.directory}/dependency
                    -DBOOST_COMPILER=${GCC_VERSION}
                    -DFFMPEG_DIR=${project.build.directory}/dependency
                    -DLOG4CPLUS_DIR=${project.build.directory}/dependency
                    -DSQLITE_DIR=${project.build.directory}/dependency
                    -DWT_DIR=${project.build.directory}/dependency
                    -DBUILD_TESTING=On
                    -DBREAKPAD_DIR=${project.build.directory}/dependency
                    -DCURL_DIR=${project.build.directory}/dependency
                    -DINSTALLBUILDER_EXE=${env.INSTALLBUILDER_EXE}
                    -DSVN_VERSION=${env.SVN_REVISION}
                    .."/>
                </exec>
                <exec executable="${MAKE_EXECUTABLE}" dir="${project.basedir}/build" failonerror="yes">
                  <arg line="all install"/>
                </exec>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <phase>test1</phase>
            <id>test</id>
            <configuration>
              <tasks>
                <!--<copy file="${project.basedir}/target/dependency/share/english/errmsg.sys" todir="res"/>-->
                <exec executable="${MAKE_EXECUTABLE}" dir="${project.basedir}/build/test" failonerror="yes">
                  <env key="MYSQLD_BIN" path="${project.basedir}/target/dependency/bin/mysqld${exe}"/>
                  <env key="MYSQL_DATA" path="${project.basedir}"/>
                  <env key="MYSQL_LANG" path="${project.basedir}/res"/>
                  <env key="MYSQL_BOOT" path="${project.basedir}/sql/CreateDatabase.sql"/>
                  <env key="PATH" path="${env.PATH}:${project.basedir}/target/dependency/lib:${project.basedir}/target/dependency/bin:${project.basedir}/build/src/org/esb:${project.basedir}/build/src/org/esb/io"/>
                  <env key="DYLD_LIBRARY_PATH" path="${project.basedir}/target/dependency/lib;${project.basedir}/target/dependency/bin:${project.basedir}/build/src/org/esb"/>
                  <arg line="test"/>
                </exec>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <!--<execution>
            <phase>prepare-package</phase>
            <id>install</id>
            <configuration>
              <tasks>
                <exec executable="${MAKE_EXECUTABLE}" dir="${project.basedir}/build" failonerror="yes">
                  <arg line="install"/>
                </exec>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>-->
          <execution>
            <phase>package</phase>
            <id>package</id>
            <configuration>
              <tasks>
                <!--<chmod file="${project.build.directory}/dependency/bin/dump_syms" perm="ugo+rx"/>
                <exec executable="${MAKE_EXECUTABLE}" dir="${project.basedir}/build" failonerror="yes">
                  <arg line="uploadsymbols"/>
                </exec>-->
                <delete dir="${project.basedir}/iss/output"/>
                <exec executable="${MAKE_EXECUTABLE}" dir="${project.basedir}/build" failonerror="yes">
                  <arg line="package"/>
                </exec>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <phase>package</phase>
            <id>upload</id>
            <configuration>
              <tasks if="ftp_upload">
		<ftp action="send" server="codergrid.de" remotedir="/" userid="${userid}" password="${passwd}" depends="yes" verbose="yes">
		    <fileset dir="${project.basedir}/build">
			<include name="*.dmg" />
			<include name="*.exe" />
			<include name="*.sh" />
		    </fileset>
		</ftp>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>build-release</id>
            <phase>package</phase>
            <goals>
              <goal>attached</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>assembly/release-mhive.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.esb.boost</groupId>
      <artifactId>boost</artifactId>
      <version>1.44.0</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.wxwidgets</groupId>
      <artifactId>wxwidgets</artifactId>
      <version>2.9.1</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.breakpad</groupId>
      <artifactId>breakpad</artifactId>
      <version>1.5</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.ffmpeg</groupId>
      <artifactId>ffmpeg</artifactId>
      <version>daily</version>
      <type>zip</type>
     <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.log4cplus</groupId>
      <artifactId>log4cplus</artifactId>
      <version>1.0.4-rc9</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.litesql</groupId>
      <artifactId>litesql</artifactId>
      <version>0.3.8-beta-patch-2</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.libcurl</groupId>
      <artifactId>libcurl</artifactId>
      <version>7.21.3-1</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.safmq</groupId>
      <artifactId>safmq</artifactId>
      <version>0.8.3-3</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.sqlite</groupId>
      <artifactId>sqlite</artifactId>
      <version>3.7.2</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.protobuf</groupId>
      <artifactId>protobuf</artifactId>
      <version>2.3.0</version>
      <type>zip</type>
      <classifier>${my.family}-${build_type}</classifier>
    </dependency>
    <dependency>
      <groupId>org.esb.jhive</groupId>
      <artifactId>jhive-test-fixtures</artifactId>
      <version>1.0</version>
      <type>zip</type>
    </dependency>
  </dependencies>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
</project>
