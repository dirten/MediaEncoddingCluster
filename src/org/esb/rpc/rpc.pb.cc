// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace esb {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryForServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryForServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryForServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryForServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessUnitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessUnitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessUnitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessUnitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorReason_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* DiscoveryService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* NodeService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ProcessUnitService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ProcessService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_proto_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, callback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_reason_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  QueryForServiceRequest_descriptor_ = file->message_type(2);
  static const int QueryForServiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceRequest, service_name_),
  };
  QueryForServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryForServiceRequest_descriptor_,
      QueryForServiceRequest::default_instance_,
      QueryForServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryForServiceRequest));
  QueryForServiceResponse_descriptor_ = file->message_type(3);
  static const int QueryForServiceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceResponse, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceResponse, registered_),
  };
  QueryForServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryForServiceResponse_descriptor_,
      QueryForServiceResponse::default_instance_,
      QueryForServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryForServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryForServiceResponse));
  Node_descriptor_ = file->message_type(4);
  static const int Node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  NodeList_descriptor_ = file->message_type(5);
  static const int NodeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, nodes_),
  };
  NodeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeList_descriptor_,
      NodeList::default_instance_,
      NodeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeList));
  ProcessUnit_descriptor_ = file->message_type(6);
  static const int ProcessUnit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnit, serialized_data_),
  };
  ProcessUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessUnit_descriptor_,
      ProcessUnit::default_instance_,
      ProcessUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessUnit));
  ProcessUnitRequest_descriptor_ = file->message_type(7);
  static const int ProcessUnitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitRequest, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitRequest, unit_data_),
  };
  ProcessUnitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessUnitRequest_descriptor_,
      ProcessUnitRequest::default_instance_,
      ProcessUnitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessUnitRequest));
  ProcessUnitResponse_descriptor_ = file->message_type(8);
  static const int ProcessUnitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitResponse, unit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitResponse, status_),
  };
  ProcessUnitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessUnitResponse_descriptor_,
      ProcessUnitResponse::default_instance_,
      ProcessUnitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessUnitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessUnitResponse));
  Process_descriptor_ = file->message_type(9);
  static const int Process_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, process_name_),
  };
  Process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Process_descriptor_,
      Process::default_instance_,
      Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Process));
  ProcessRequest_descriptor_ = file->message_type(10);
  static const int ProcessRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, process_data_),
  };
  ProcessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessRequest_descriptor_,
      ProcessRequest::default_instance_,
      ProcessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessRequest));
  ProcessResponse_descriptor_ = file->message_type(11);
  static const int ProcessResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, process_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, status_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, status_code_),
  };
  ProcessResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessResponse_descriptor_,
      ProcessResponse::default_instance_,
      ProcessResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessResponse));
  ErrorReason_descriptor_ = file->enum_type(0);
  DiscoveryService_descriptor_ = file->service(0);
  NodeService_descriptor_ = file->service(1);
  ProcessUnitService_descriptor_ = file->service(2);
  ProcessService_descriptor_ = file->service(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryForServiceRequest_descriptor_, &QueryForServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryForServiceResponse_descriptor_, &QueryForServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeList_descriptor_, &NodeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessUnit_descriptor_, &ProcessUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessUnitRequest_descriptor_, &ProcessUnitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessUnitResponse_descriptor_, &ProcessUnitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Process_descriptor_, &Process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessRequest_descriptor_, &ProcessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessResponse_descriptor_, &ProcessResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete QueryForServiceRequest::default_instance_;
  delete QueryForServiceRequest_reflection_;
  delete QueryForServiceResponse::default_instance_;
  delete QueryForServiceResponse_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete NodeList::default_instance_;
  delete NodeList_reflection_;
  delete ProcessUnit::default_instance_;
  delete ProcessUnit_reflection_;
  delete ProcessUnitRequest::default_instance_;
  delete ProcessUnitRequest_reflection_;
  delete ProcessUnitResponse::default_instance_;
  delete ProcessUnitResponse_reflection_;
  delete Process::default_instance_;
  delete Process_reflection_;
  delete ProcessRequest::default_instance_;
  delete ProcessRequest_reflection_;
  delete ProcessResponse::default_instance_;
  delete ProcessResponse_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\022\013org.esb.rpc\"K\n\007Request\022\024\n\014s"
    "ervice_name\030\001 \002(\t\022\023\n\013method_name\030\002 \002(\t\022\025"
    "\n\rrequest_proto\030\003 \002(\014\"z\n\010Response\022\026\n\016res"
    "ponse_proto\030\001 \001(\014\022\r\n\005error\030\002 \001(\t\022\027\n\010call"
    "back\030\003 \001(\010:\005false\022.\n\014error_reason\030\004 \001(\0162"
    "\030.org.esb.rpc.ErrorReason\".\n\026QueryForSer"
    "viceRequest\022\024\n\014service_name\030\001 \002(\t\"J\n\027Que"
    "ryForServiceResponse\022\024\n\014service_name\030\001 \001"
    "(\t\022\031\n\nregistered\030\002 \002(\010:\005false\"%\n\004Node\022\017\n"
    "\007address\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\",\n\010NodeList"
    "\022 \n\005nodes\030\001 \003(\0132\021.org.esb.rpc.Node\"&\n\013Pr"
    "ocessUnit\022\027\n\017serialized_data\030\001 \002(\014\"b\n\022Pr"
    "ocessUnitRequest\022\037\n\004node\030\001 \002(\0132\021.org.esb"
    ".rpc.Node\022+\n\tunit_data\030\002 \001(\0132\030.org.esb.r"
    "pc.ProcessUnit\"R\n\023ProcessUnitResponse\022+\n"
    "\tunit_data\030\002 \001(\0132\030.org.esb.rpc.ProcessUn"
    "it\022\016\n\006status\030\003 \002(\t\"\037\n\007Process\022\024\n\014process"
    "_name\030\001 \002(\t\"]\n\016ProcessRequest\022\037\n\004node\030\001 "
    "\002(\0132\021.org.esb.rpc.Node\022*\n\014process_data\030\002"
    " \001(\0132\024.org.esb.rpc.Process\"j\n\017ProcessRes"
    "ponse\022*\n\014process_data\030\002 \001(\0132\024.org.esb.rp"
    "c.Process\022\026\n\016status_message\030\003 \002(\t\022\023\n\013sta"
    "tus_code\030\004 \002(\005*\360\001\n\013ErrorReason\022\025\n\021NO_ERR"
    "OR_OCCURRED\020\000\022\024\n\020BAD_REQUEST_DATA\020\001\022\025\n\021B"
    "AD_REQUEST_PROTO\020\002\022\025\n\021SERVICE_NOT_FOUND\020"
    "\003\022\024\n\020METHOD_NOT_FOUND\020\004\022\r\n\tRPC_ERROR\020\005\022\016"
    "\n\nRPC_FAILED\020\006\022\031\n\025INVALID_REQUEST_PROTO\020"
    "\007\022\026\n\022BAD_RESPONSE_PROTO\020\010\022\020\n\014UNKNOWN_HOS"
    "T\020\t\022\014\n\010IO_ERROR\020\n2p\n\020DiscoveryService\022\\\n"
    "\017QueryForService\022#.org.esb.rpc.QueryForS"
    "erviceRequest\032$.org.esb.rpc.QueryForServ"
    "iceResponse2\203\001\n\013NodeService\0228\n\014registerN"
    "ode\022\021.org.esb.rpc.Node\032\025.org.esb.rpc.Nod"
    "eList\022:\n\016unregisterNode\022\021.org.esb.rpc.No"
    "de\032\025.org.esb.rpc.NodeList2\276\001\n\022ProcessUni"
    "tService\022S\n\016getProcessUnit\022\037.org.esb.rpc"
    ".ProcessUnitRequest\032 .org.esb.rpc.Proces"
    "sUnitResponse\022S\n\016putProcessUnit\022\037.org.es"
    "b.rpc.ProcessUnitRequest\032 .org.esb.rpc.P"
    "rocessUnitResponse2\362\001\n\016ProcessService\022I\n"
    "\014startProcess\022\033.org.esb.rpc.ProcessReque"
    "st\032\034.org.esb.rpc.ProcessResponse\022H\n\013stop"
    "Process\022\033.org.esb.rpc.ProcessRequest\032\034.o"
    "rg.esb.rpc.ProcessResponse\022K\n\016getProcess"
    "List\022\033.org.esb.rpc.ProcessRequest\032\034.org."
    "esb.rpc.ProcessResponse", 1823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  QueryForServiceRequest::default_instance_ = new QueryForServiceRequest();
  QueryForServiceResponse::default_instance_ = new QueryForServiceResponse();
  Node::default_instance_ = new Node();
  NodeList::default_instance_ = new NodeList();
  ProcessUnit::default_instance_ = new ProcessUnit();
  ProcessUnitRequest::default_instance_ = new ProcessUnitRequest();
  ProcessUnitResponse::default_instance_ = new ProcessUnitResponse();
  Process::default_instance_ = new Process();
  ProcessRequest::default_instance_ = new ProcessRequest();
  ProcessResponse::default_instance_ = new ProcessResponse();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  QueryForServiceRequest::default_instance_->InitAsDefaultInstance();
  QueryForServiceResponse::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  NodeList::default_instance_->InitAsDefaultInstance();
  ProcessUnit::default_instance_->InitAsDefaultInstance();
  ProcessUnitRequest::default_instance_->InitAsDefaultInstance();
  ProcessUnitResponse::default_instance_->InitAsDefaultInstance();
  Process::default_instance_->InitAsDefaultInstance();
  ProcessRequest::default_instance_->InitAsDefaultInstance();
  ProcessResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorReason_descriptor_;
}
bool ErrorReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string Request::_default_service_name_;
const ::std::string Request::_default_method_name_;
const ::std::string Request::_default_request_proto_;
#ifndef _MSC_VER
const int Request::kServiceNameFieldNumber;
const int Request::kMethodNameFieldNumber;
const int Request::kRequestProtoFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&_default_service_name_);
  method_name_ = const_cast< ::std::string*>(&_default_method_name_);
  request_proto_ = const_cast< ::std::string*>(&_default_request_proto_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (service_name_ != &_default_service_name_) {
    delete service_name_;
  }
  if (method_name_ != &_default_method_name_) {
    delete method_name_;
  }
  if (request_proto_ != &_default_request_proto_) {
    delete request_proto_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (service_name_ != &_default_service_name_) {
        service_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (method_name_ != &_default_method_name_) {
        method_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (request_proto_ != &_default_request_proto_) {
        request_proto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }
      
      // required string method_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_request_proto;
        break;
      }
      
      // required bytes request_proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }
  
  // required string method_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method_name(), output);
  }
  
  // required bytes request_proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->request_proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }
  
  // required string method_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }
  
  // required bytes request_proto = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->request_proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // required string method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }
    
    // required bytes request_proto = 3;
    if (has_request_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_service_name(from.service_name());
    }
    if (from._has_bit(1)) {
      set_method_name(from.method_name());
    }
    if (from._has_bit(2)) {
      set_request_proto(from.request_proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(request_proto_, other->request_proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Response::_default_response_proto_;
const ::std::string Response::_default_error_;
#ifndef _MSC_VER
const int Response::kResponseProtoFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kCallbackFieldNumber;
const int Response::kErrorReasonFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  response_proto_ = const_cast< ::std::string*>(&_default_response_proto_);
  error_ = const_cast< ::std::string*>(&_default_error_);
  callback_ = false;
  error_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (response_proto_ != &_default_response_proto_) {
    delete response_proto_;
  }
  if (error_ != &_default_error_) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (response_proto_ != &_default_response_proto_) {
        response_proto_->clear();
      }
    }
    if (_has_bit(1)) {
      if (error_ != &_default_error_) {
        error_->clear();
      }
    }
    callback_ = false;
    error_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes response_proto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_callback;
        break;
      }
      
      // optional bool callback = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &callback_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_reason;
        break;
      }
      
      // optional .org.esb.rpc.ErrorReason error_reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (org::esb::rpc::ErrorReason_IsValid(value)) {
            set_error_reason(static_cast< org::esb::rpc::ErrorReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes response_proto = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->response_proto(), output);
  }
  
  // optional string error = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }
  
  // optional bool callback = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->callback(), output);
  }
  
  // optional .org.esb.rpc.ErrorReason error_reason = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes response_proto = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response_proto(), target);
  }
  
  // optional string error = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }
  
  // optional bool callback = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->callback(), target);
  }
  
  // optional .org.esb.rpc.ErrorReason error_reason = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes response_proto = 1;
    if (has_response_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response_proto());
    }
    
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
    // optional bool callback = 3 [default = false];
    if (has_callback()) {
      total_size += 1 + 1;
    }
    
    // optional .org.esb.rpc.ErrorReason error_reason = 4;
    if (has_error_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_response_proto(from.response_proto());
    }
    if (from._has_bit(1)) {
      set_error(from.error());
    }
    if (from._has_bit(2)) {
      set_callback(from.callback());
    }
    if (from._has_bit(3)) {
      set_error_reason(from.error_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(response_proto_, other->response_proto_);
    std::swap(error_, other->error_);
    std::swap(callback_, other->callback_);
    std::swap(error_reason_, other->error_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryForServiceRequest::_default_service_name_;
#ifndef _MSC_VER
const int QueryForServiceRequest::kServiceNameFieldNumber;
#endif  // !_MSC_VER

QueryForServiceRequest::QueryForServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryForServiceRequest::InitAsDefaultInstance() {
}

QueryForServiceRequest::QueryForServiceRequest(const QueryForServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryForServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&_default_service_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryForServiceRequest::~QueryForServiceRequest() {
  SharedDtor();
}

void QueryForServiceRequest::SharedDtor() {
  if (service_name_ != &_default_service_name_) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void QueryForServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryForServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryForServiceRequest_descriptor_;
}

const QueryForServiceRequest& QueryForServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

QueryForServiceRequest* QueryForServiceRequest::default_instance_ = NULL;

QueryForServiceRequest* QueryForServiceRequest::New() const {
  return new QueryForServiceRequest;
}

void QueryForServiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (service_name_ != &_default_service_name_) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryForServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryForServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryForServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryForServiceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryForServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryForServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryForServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryForServiceRequest::MergeFrom(const QueryForServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryForServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryForServiceRequest::CopyFrom(const QueryForServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryForServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryForServiceRequest::Swap(QueryForServiceRequest* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryForServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryForServiceRequest_descriptor_;
  metadata.reflection = QueryForServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryForServiceResponse::_default_service_name_;
#ifndef _MSC_VER
const int QueryForServiceResponse::kServiceNameFieldNumber;
const int QueryForServiceResponse::kRegisteredFieldNumber;
#endif  // !_MSC_VER

QueryForServiceResponse::QueryForServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryForServiceResponse::InitAsDefaultInstance() {
}

QueryForServiceResponse::QueryForServiceResponse(const QueryForServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryForServiceResponse::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&_default_service_name_);
  registered_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryForServiceResponse::~QueryForServiceResponse() {
  SharedDtor();
}

void QueryForServiceResponse::SharedDtor() {
  if (service_name_ != &_default_service_name_) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void QueryForServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryForServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryForServiceResponse_descriptor_;
}

const QueryForServiceResponse& QueryForServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

QueryForServiceResponse* QueryForServiceResponse::default_instance_ = NULL;

QueryForServiceResponse* QueryForServiceResponse::New() const {
  return new QueryForServiceResponse;
}

void QueryForServiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (service_name_ != &_default_service_name_) {
        service_name_->clear();
      }
    }
    registered_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryForServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_registered;
        break;
      }
      
      // required bool registered = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registered_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryForServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }
  
  // required bool registered = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->registered(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryForServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }
  
  // required bool registered = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->registered(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryForServiceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // required bool registered = 2 [default = false];
    if (has_registered()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryForServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryForServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryForServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryForServiceResponse::MergeFrom(const QueryForServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_service_name(from.service_name());
    }
    if (from._has_bit(1)) {
      set_registered(from.registered());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryForServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryForServiceResponse::CopyFrom(const QueryForServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryForServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void QueryForServiceResponse::Swap(QueryForServiceResponse* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(registered_, other->registered_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryForServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryForServiceResponse_descriptor_;
  metadata.reflection = QueryForServiceResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Node::_default_address_;
const ::std::string Node::_default_name_;
#ifndef _MSC_VER
const int Node::kAddressFieldNumber;
const int Node::kNameFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&_default_address_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_address(from.address());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeList::kNodesFieldNumber;
#endif  // !_MSC_VER

NodeList::NodeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeList::InitAsDefaultInstance() {
}

NodeList::NodeList(const NodeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeList::~NodeList() {
  SharedDtor();
}

void NodeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeList_descriptor_;
}

const NodeList& NodeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

NodeList* NodeList::default_instance_ = NULL;

NodeList* NodeList::New() const {
  return new NodeList;
}

void NodeList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.esb.rpc.Node nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .org.esb.rpc.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .org.esb.rpc.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeList::ByteSize() const {
  int total_size = 0;
  
  // repeated .org.esb.rpc.Node nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeList::MergeFrom(const NodeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeList::CopyFrom(const NodeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeList::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void NodeList::Swap(NodeList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeList_descriptor_;
  metadata.reflection = NodeList_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ProcessUnit::_default_serialized_data_;
#ifndef _MSC_VER
const int ProcessUnit::kSerializedDataFieldNumber;
#endif  // !_MSC_VER

ProcessUnit::ProcessUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessUnit::InitAsDefaultInstance() {
}

ProcessUnit::ProcessUnit(const ProcessUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessUnit::SharedCtor() {
  _cached_size_ = 0;
  serialized_data_ = const_cast< ::std::string*>(&_default_serialized_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessUnit::~ProcessUnit() {
  SharedDtor();
}

void ProcessUnit::SharedDtor() {
  if (serialized_data_ != &_default_serialized_data_) {
    delete serialized_data_;
  }
  if (this != default_instance_) {
  }
}

void ProcessUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessUnit_descriptor_;
}

const ProcessUnit& ProcessUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

ProcessUnit* ProcessUnit::default_instance_ = NULL;

ProcessUnit* ProcessUnit::New() const {
  return new ProcessUnit;
}

void ProcessUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (serialized_data_ != &_default_serialized_data_) {
        serialized_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialized_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serialized_data = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialized_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serialized_data = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialized_data = 1;
    if (has_serialized_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessUnit::MergeFrom(const ProcessUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serialized_data(from.serialized_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessUnit::CopyFrom(const ProcessUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProcessUnit::Swap(ProcessUnit* other) {
  if (other != this) {
    std::swap(serialized_data_, other->serialized_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessUnit_descriptor_;
  metadata.reflection = ProcessUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessUnitRequest::kNodeFieldNumber;
const int ProcessUnitRequest::kUnitDataFieldNumber;
#endif  // !_MSC_VER

ProcessUnitRequest::ProcessUnitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessUnitRequest::InitAsDefaultInstance() {
  node_ = const_cast< ::org::esb::rpc::Node*>(&::org::esb::rpc::Node::default_instance());
  unit_data_ = const_cast< ::org::esb::rpc::ProcessUnit*>(&::org::esb::rpc::ProcessUnit::default_instance());
}

ProcessUnitRequest::ProcessUnitRequest(const ProcessUnitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessUnitRequest::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  unit_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessUnitRequest::~ProcessUnitRequest() {
  SharedDtor();
}

void ProcessUnitRequest::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
    delete unit_data_;
  }
}

void ProcessUnitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessUnitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessUnitRequest_descriptor_;
}

const ProcessUnitRequest& ProcessUnitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

ProcessUnitRequest* ProcessUnitRequest::default_instance_ = NULL;

ProcessUnitRequest* ProcessUnitRequest::New() const {
  return new ProcessUnitRequest;
}

void ProcessUnitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (node_ != NULL) node_->::org::esb::rpc::Node::Clear();
    }
    if (_has_bit(1)) {
      if (unit_data_ != NULL) unit_data_->::org::esb::rpc::ProcessUnit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessUnitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.esb.rpc.Node node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unit_data;
        break;
      }
      
      // optional .org.esb.rpc.ProcessUnit unit_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessUnitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.esb.rpc.Node node = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  // optional .org.esb.rpc.ProcessUnit unit_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unit_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessUnitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.esb.rpc.Node node = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  // optional .org.esb.rpc.ProcessUnit unit_data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unit_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessUnitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.esb.rpc.Node node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
    // optional .org.esb.rpc.ProcessUnit unit_data = 2;
    if (has_unit_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessUnitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessUnitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessUnitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessUnitRequest::MergeFrom(const ProcessUnitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_node()->::org::esb::rpc::Node::MergeFrom(from.node());
    }
    if (from._has_bit(1)) {
      mutable_unit_data()->::org::esb::rpc::ProcessUnit::MergeFrom(from.unit_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessUnitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessUnitRequest::CopyFrom(const ProcessUnitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessUnitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  if (has_unit_data()) {
    if (!this->unit_data().IsInitialized()) return false;
  }
  return true;
}

void ProcessUnitRequest::Swap(ProcessUnitRequest* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(unit_data_, other->unit_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessUnitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessUnitRequest_descriptor_;
  metadata.reflection = ProcessUnitRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ProcessUnitResponse::_default_status_;
#ifndef _MSC_VER
const int ProcessUnitResponse::kUnitDataFieldNumber;
const int ProcessUnitResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProcessUnitResponse::ProcessUnitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessUnitResponse::InitAsDefaultInstance() {
  unit_data_ = const_cast< ::org::esb::rpc::ProcessUnit*>(&::org::esb::rpc::ProcessUnit::default_instance());
}

ProcessUnitResponse::ProcessUnitResponse(const ProcessUnitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessUnitResponse::SharedCtor() {
  _cached_size_ = 0;
  unit_data_ = NULL;
  status_ = const_cast< ::std::string*>(&_default_status_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessUnitResponse::~ProcessUnitResponse() {
  SharedDtor();
}

void ProcessUnitResponse::SharedDtor() {
  if (status_ != &_default_status_) {
    delete status_;
  }
  if (this != default_instance_) {
    delete unit_data_;
  }
}

void ProcessUnitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessUnitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessUnitResponse_descriptor_;
}

const ProcessUnitResponse& ProcessUnitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

ProcessUnitResponse* ProcessUnitResponse::default_instance_ = NULL;

ProcessUnitResponse* ProcessUnitResponse::New() const {
  return new ProcessUnitResponse;
}

void ProcessUnitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (unit_data_ != NULL) unit_data_->::org::esb::rpc::ProcessUnit::Clear();
    }
    if (_has_bit(1)) {
      if (status_ != &_default_status_) {
        status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessUnitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.esb.rpc.ProcessUnit unit_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }
      
      // required string status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessUnitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .org.esb.rpc.ProcessUnit unit_data = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unit_data(), output);
  }
  
  // required string status = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessUnitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .org.esb.rpc.ProcessUnit unit_data = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unit_data(), target);
  }
  
  // required string status = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessUnitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.esb.rpc.ProcessUnit unit_data = 2;
    if (has_unit_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_data());
    }
    
    // required string status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessUnitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessUnitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessUnitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessUnitResponse::MergeFrom(const ProcessUnitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_unit_data()->::org::esb::rpc::ProcessUnit::MergeFrom(from.unit_data());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessUnitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessUnitResponse::CopyFrom(const ProcessUnitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessUnitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_unit_data()) {
    if (!this->unit_data().IsInitialized()) return false;
  }
  return true;
}

void ProcessUnitResponse::Swap(ProcessUnitResponse* other) {
  if (other != this) {
    std::swap(unit_data_, other->unit_data_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessUnitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessUnitResponse_descriptor_;
  metadata.reflection = ProcessUnitResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Process::_default_process_name_;
#ifndef _MSC_VER
const int Process::kProcessNameFieldNumber;
#endif  // !_MSC_VER

Process::Process()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Process::InitAsDefaultInstance() {
}

Process::Process(const Process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Process::SharedCtor() {
  _cached_size_ = 0;
  process_name_ = const_cast< ::std::string*>(&_default_process_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Process::~Process() {
  SharedDtor();
}

void Process::SharedDtor() {
  if (process_name_ != &_default_process_name_) {
    delete process_name_;
  }
  if (this != default_instance_) {
  }
}

void Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Process_descriptor_;
}

const Process& Process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

Process* Process::default_instance_ = NULL;

Process* Process::New() const {
  return new Process;
}

void Process::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (process_name_ != &_default_process_name_) {
        process_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string process_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string process_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string process_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Process::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string process_name = 1;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Process::MergeFrom(const Process& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_process_name(from.process_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Process::CopyFrom(const Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Process::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Process::Swap(Process* other) {
  if (other != this) {
    std::swap(process_name_, other->process_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Process_descriptor_;
  metadata.reflection = Process_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessRequest::kNodeFieldNumber;
const int ProcessRequest::kProcessDataFieldNumber;
#endif  // !_MSC_VER

ProcessRequest::ProcessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessRequest::InitAsDefaultInstance() {
  node_ = const_cast< ::org::esb::rpc::Node*>(&::org::esb::rpc::Node::default_instance());
  process_data_ = const_cast< ::org::esb::rpc::Process*>(&::org::esb::rpc::Process::default_instance());
}

ProcessRequest::ProcessRequest(const ProcessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessRequest::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  process_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessRequest::~ProcessRequest() {
  SharedDtor();
}

void ProcessRequest::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
    delete process_data_;
  }
}

void ProcessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessRequest_descriptor_;
}

const ProcessRequest& ProcessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

ProcessRequest* ProcessRequest::default_instance_ = NULL;

ProcessRequest* ProcessRequest::New() const {
  return new ProcessRequest;
}

void ProcessRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (node_ != NULL) node_->::org::esb::rpc::Node::Clear();
    }
    if (_has_bit(1)) {
      if (process_data_ != NULL) process_data_->::org::esb::rpc::Process::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.esb.rpc.Node node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_process_data;
        break;
      }
      
      // optional .org.esb.rpc.Process process_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.esb.rpc.Node node = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  // optional .org.esb.rpc.Process process_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->process_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.esb.rpc.Node node = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  // optional .org.esb.rpc.Process process_data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->process_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.esb.rpc.Node node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
    // optional .org.esb.rpc.Process process_data = 2;
    if (has_process_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessRequest::MergeFrom(const ProcessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_node()->::org::esb::rpc::Node::MergeFrom(from.node());
    }
    if (from._has_bit(1)) {
      mutable_process_data()->::org::esb::rpc::Process::MergeFrom(from.process_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessRequest::CopyFrom(const ProcessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  if (has_process_data()) {
    if (!this->process_data().IsInitialized()) return false;
  }
  return true;
}

void ProcessRequest::Swap(ProcessRequest* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(process_data_, other->process_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessRequest_descriptor_;
  metadata.reflection = ProcessRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ProcessResponse::_default_status_message_;
#ifndef _MSC_VER
const int ProcessResponse::kProcessDataFieldNumber;
const int ProcessResponse::kStatusMessageFieldNumber;
const int ProcessResponse::kStatusCodeFieldNumber;
#endif  // !_MSC_VER

ProcessResponse::ProcessResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessResponse::InitAsDefaultInstance() {
  process_data_ = const_cast< ::org::esb::rpc::Process*>(&::org::esb::rpc::Process::default_instance());
}

ProcessResponse::ProcessResponse(const ProcessResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessResponse::SharedCtor() {
  _cached_size_ = 0;
  process_data_ = NULL;
  status_message_ = const_cast< ::std::string*>(&_default_status_message_);
  status_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessResponse::~ProcessResponse() {
  SharedDtor();
}

void ProcessResponse::SharedDtor() {
  if (status_message_ != &_default_status_message_) {
    delete status_message_;
  }
  if (this != default_instance_) {
    delete process_data_;
  }
}

void ProcessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessResponse_descriptor_;
}

const ProcessResponse& ProcessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

ProcessResponse* ProcessResponse::default_instance_ = NULL;

ProcessResponse* ProcessResponse::New() const {
  return new ProcessResponse;
}

void ProcessResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (process_data_ != NULL) process_data_->::org::esb::rpc::Process::Clear();
    }
    if (_has_bit(1)) {
      if (status_message_ != &_default_status_message_) {
        status_message_->clear();
      }
    }
    status_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.esb.rpc.Process process_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status_message;
        break;
      }
      
      // required string status_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status_message().data(), this->status_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status_code;
        break;
      }
      
      // required int32 status_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .org.esb.rpc.Process process_data = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->process_data(), output);
  }
  
  // required string status_message = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status_message(), output);
  }
  
  // required int32 status_code = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .org.esb.rpc.Process process_data = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->process_data(), target);
  }
  
  // required string status_message = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status_message(), target);
  }
  
  // required int32 status_code = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.esb.rpc.Process process_data = 2;
    if (has_process_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process_data());
    }
    
    // required string status_message = 3;
    if (has_status_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_message());
    }
    
    // required int32 status_code = 4;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessResponse::MergeFrom(const ProcessResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_process_data()->::org::esb::rpc::Process::MergeFrom(from.process_data());
    }
    if (from._has_bit(1)) {
      set_status_message(from.status_message());
    }
    if (from._has_bit(2)) {
      set_status_code(from.status_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessResponse::CopyFrom(const ProcessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  if (has_process_data()) {
    if (!this->process_data().IsInitialized()) return false;
  }
  return true;
}

void ProcessResponse::Swap(ProcessResponse* other) {
  if (other != this) {
    std::swap(process_data_, other->process_data_);
    std::swap(status_message_, other->status_message_);
    std::swap(status_code_, other->status_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessResponse_descriptor_;
  metadata.reflection = ProcessResponse_reflection_;
  return metadata;
}


// ===================================================================

DiscoveryService::~DiscoveryService() {}

const ::google::protobuf::ServiceDescriptor* DiscoveryService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DiscoveryService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryService_descriptor_;
}

void DiscoveryService::QueryForService(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::QueryForServiceRequest*,
                         ::org::esb::rpc::QueryForServiceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryForService() not implemented.");
  done->Run();
}

void DiscoveryService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DiscoveryService_descriptor_);
  switch(method->index()) {
    case 0:
      QueryForService(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::QueryForServiceRequest*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::QueryForServiceResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DiscoveryService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::QueryForServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& DiscoveryService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::QueryForServiceResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

DiscoveryService_Stub::DiscoveryService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DiscoveryService_Stub::DiscoveryService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DiscoveryService_Stub::~DiscoveryService_Stub() {
  if (owns_channel_) delete channel_;
}

void DiscoveryService_Stub::QueryForService(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::QueryForServiceRequest* request,
                              ::org::esb::rpc::QueryForServiceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

NodeService::~NodeService() {}

const ::google::protobuf::ServiceDescriptor* NodeService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* NodeService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeService_descriptor_;
}

void NodeService::registerNode(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::Node*,
                         ::org::esb::rpc::NodeList*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method registerNode() not implemented.");
  done->Run();
}

void NodeService::unregisterNode(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::Node*,
                         ::org::esb::rpc::NodeList*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method unregisterNode() not implemented.");
  done->Run();
}

void NodeService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), NodeService_descriptor_);
  switch(method->index()) {
    case 0:
      registerNode(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::Node*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::NodeList*>(response),
             done);
      break;
    case 1:
      unregisterNode(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::Node*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::NodeList*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NodeService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::Node::default_instance();
    case 1:
      return ::org::esb::rpc::Node::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& NodeService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::NodeList::default_instance();
    case 1:
      return ::org::esb::rpc::NodeList::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

NodeService_Stub::NodeService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
NodeService_Stub::NodeService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
NodeService_Stub::~NodeService_Stub() {
  if (owns_channel_) delete channel_;
}

void NodeService_Stub::registerNode(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::Node* request,
                              ::org::esb::rpc::NodeList* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void NodeService_Stub::unregisterNode(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::Node* request,
                              ::org::esb::rpc::NodeList* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

ProcessUnitService::~ProcessUnitService() {}

const ::google::protobuf::ServiceDescriptor* ProcessUnitService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessUnitService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ProcessUnitService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessUnitService_descriptor_;
}

void ProcessUnitService::getProcessUnit(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::ProcessUnitRequest*,
                         ::org::esb::rpc::ProcessUnitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getProcessUnit() not implemented.");
  done->Run();
}

void ProcessUnitService::putProcessUnit(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::ProcessUnitRequest*,
                         ::org::esb::rpc::ProcessUnitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method putProcessUnit() not implemented.");
  done->Run();
}

void ProcessUnitService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ProcessUnitService_descriptor_);
  switch(method->index()) {
    case 0:
      getProcessUnit(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::ProcessUnitRequest*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::ProcessUnitResponse*>(response),
             done);
      break;
    case 1:
      putProcessUnit(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::ProcessUnitRequest*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::ProcessUnitResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ProcessUnitService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::ProcessUnitRequest::default_instance();
    case 1:
      return ::org::esb::rpc::ProcessUnitRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ProcessUnitService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::ProcessUnitResponse::default_instance();
    case 1:
      return ::org::esb::rpc::ProcessUnitResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ProcessUnitService_Stub::ProcessUnitService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ProcessUnitService_Stub::ProcessUnitService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ProcessUnitService_Stub::~ProcessUnitService_Stub() {
  if (owns_channel_) delete channel_;
}

void ProcessUnitService_Stub::getProcessUnit(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::ProcessUnitRequest* request,
                              ::org::esb::rpc::ProcessUnitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ProcessUnitService_Stub::putProcessUnit(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::ProcessUnitRequest* request,
                              ::org::esb::rpc::ProcessUnitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

ProcessService::~ProcessService() {}

const ::google::protobuf::ServiceDescriptor* ProcessService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ProcessService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessService_descriptor_;
}

void ProcessService::startProcess(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::ProcessRequest*,
                         ::org::esb::rpc::ProcessResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method startProcess() not implemented.");
  done->Run();
}

void ProcessService::stopProcess(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::ProcessRequest*,
                         ::org::esb::rpc::ProcessResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method stopProcess() not implemented.");
  done->Run();
}

void ProcessService::getProcessList(::google::protobuf::RpcController* controller,
                         const ::org::esb::rpc::ProcessRequest*,
                         ::org::esb::rpc::ProcessResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getProcessList() not implemented.");
  done->Run();
}

void ProcessService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ProcessService_descriptor_);
  switch(method->index()) {
    case 0:
      startProcess(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::ProcessRequest*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::ProcessResponse*>(response),
             done);
      break;
    case 1:
      stopProcess(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::ProcessRequest*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::ProcessResponse*>(response),
             done);
      break;
    case 2:
      getProcessList(controller,
             ::google::protobuf::down_cast<const ::org::esb::rpc::ProcessRequest*>(request),
             ::google::protobuf::down_cast< ::org::esb::rpc::ProcessResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ProcessService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::ProcessRequest::default_instance();
    case 1:
      return ::org::esb::rpc::ProcessRequest::default_instance();
    case 2:
      return ::org::esb::rpc::ProcessRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ProcessService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::org::esb::rpc::ProcessResponse::default_instance();
    case 1:
      return ::org::esb::rpc::ProcessResponse::default_instance();
    case 2:
      return ::org::esb::rpc::ProcessResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ProcessService_Stub::ProcessService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ProcessService_Stub::ProcessService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ProcessService_Stub::~ProcessService_Stub() {
  if (owns_channel_) delete channel_;
}

void ProcessService_Stub::startProcess(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::ProcessRequest* request,
                              ::org::esb::rpc::ProcessResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ProcessService_Stub::stopProcess(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::ProcessRequest* request,
                              ::org::esb::rpc::ProcessResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ProcessService_Stub::getProcessList(::google::protobuf::RpcController* controller,
                              const ::org::esb::rpc::ProcessRequest* request,
                              ::org::esb::rpc::ProcessResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace esb
}  // namespace org

// @@protoc_insertion_point(global_scope)
