/*
 * Jakefile
 * NewApplication
 *
 * Created by You on February 22, 2011.
 * Copyright 2011, Your Company All rights reserved.
 */
 
require("./common.jake");

var APPNAME="MediaEncodingAdmin",
    ENV = require("system").env,
    FILE = require("file"),
    JAKE = require("jake"),
    task = JAKE.task,
    FileList = JAKE.FileList,
    app = require("cappuccino/jake").app,
    configuration = ENV["CONFIG"] || ENV["CONFIGURATION"] || ENV["c"] || "Debug",
    OS = require("os");

var subprojects = ["ModulesSource/EncodingFlowEditorModule","ModulesSource/ToolbarEncodingModule","ModulesSource/ToolbarProfileModule"];

app (APPNAME, function(task)
{	
    ENV["APPNAME"]=APPNAME;
    task.setBuildIntermediatesPath(FILE.join("Build", APPNAME+".build", configuration));
    task.setBuildPath(FILE.join("Build", configuration));
    //task.setPreventsNib2Cib(true);

    task.setProductName(APPNAME);
    task.setIdentifier("org.esb."+APPNAME);
    task.setVersion("1.0");
    task.setAuthor("EsbLab");
    task.setEmail("feedback @nospam@ codergrid.de");
    task.setSummary(APPNAME);
    task.setSources(new FileList("*.j","Controller/*.j","View/**/*.j","Categories/*.j"));
    //task.setSources((new FileList("**/*.j")).exclude(FILE.join("Build", "**"))/*.exclude(FILE.join("Modules", "**"))*/);
    task.setResources(new FileList("Resources/**"));
    task.setIndexFilePath("index.html");
    task.setInfoPlistPath("Info.plist");

    if (configuration === "Debug"){
        task.setCompilerFlags("-DDEBUG -g");
	task.setIndexFilePath("index-debug.html");
    }else{
        task.setCompilerFlags("-O");
    }
});


["build"].forEach(function(aTaskName)
{
    task (aTaskName, function()
    {
	print("TaskName"+aTaskName);
	print(ENV["CONFIGURATION"]);
	ENV["CONFIG"]=ENV["CONFIGURATION"];
	JAKE.subjake(subprojects, aTaskName, ENV);

	/*build modules.plist*/
	
	var plist = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
	plist+="<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n";
	plist+="<plist version=\"1.0\">\n";
	plist+="    <dict>\n";
        plist+="    <key>Modules</key>\n";
        plist+="    <array>\n";
        subprojects.forEach(
    	    function(project){
    		var tmp=project.split("/");
    		var projectname=tmp[1];
    		plist+= "        <dict>\n            <key>folder</key>\n            <string>" + projectname + "</string>\n        </dict>\n";
    	    }
        );
        plist +="    </array>\n";
	plist +="    </dict>\n";
	plist +="</plist>";
        FILE.write(FILE.join("Build", configuration, APPNAME, "Modules","modules.plist"),plist);
        //FILE.write(FILE.join("Modules","modules.plist"),plist);
    });
});

task ("default", [APPNAME], function()
{
    printResults(configuration);
});

task ("build", ["default"]);

task ("debug", function()
{
    ENV["CONFIGURATION"] = "Debug";
    JAKE.subjake(["."], "build", ENV);
});

task ("install-debug",["build"], function()
{
    ENV["CONFIGURATION"] = "Debug";
    //print(ENV["CONFIGURATION"]);
});

task ("install-release",["build"], function()
{
    ENV["CONFIGURATION"] = "Release";
    //print(ENV["CONFIGURATION"]);
});

task ("release", function()
{
    ENV["CONFIGURATION"] = "Release";
    JAKE.subjake(["."], "build", ENV);
});

task ("run", ["debug"], function()
{
    OS.system(["open", FILE.join("Build", "Debug", APPNAME, "index.html")]);
});

task ("run-release", ["release"], function()
{
    OS.system(["open", FILE.join("Build", "Release", APPNAME, "index.html")]);
});

task ("flatten",  function()
{
    FILE.mkdirs(FILE.join("Build", "Flatten", APPNAME));
    OS.system(["flatten", "-f", "--verbose", "--split", "3", FILE.join("Build", "Release", APPNAME), FILE.join("Build", "Flatten", APPNAME)]);
});

task ("deploy", ["release"], function()
{
    FILE.mkdirs(FILE.join("Build", "Deployment", APPNAME));
    OS.system(["press", "-f", FILE.join("Build", "Release", APPNAME), FILE.join("Build", "Deployment", APPNAME)]);
    printResults("Deployment")
});

task ("desktop", ["release"], function()
{
    FILE.mkdirs(FILE.join("Build", "Desktop", APPNAME));
    require("cappuccino/nativehost").buildNativeHost(FILE.join("Build", "Release", APPNAME), FILE.join("Build", "Desktop", APPNAME, APPNAME+".app"));
    printResults("Desktop")
});

task ("run-desktop", ["desktop"], function()
{
    OS.system([FILE.join("Build", "Desktop", APPNAME, APPNAME+".app", "Contents", "MacOS", "NativeHost"), "-i"]);
});

function printResults(configuration)
{
    print("----------------------------");
    print(configuration+" app built at path: "+FILE.join("Build", configuration, APPNAME));
    print("----------------------------");
}
