@import <AppKit/CPMenuItem.j>
@import "/View/FormBuilder.j"
@import "/View/ProfileTableDataView.j"
@implementation VideoView :CPScrollView
  {
    id _json;
    id codecs;
    id option;
    id _guiData;
    var nexttop;
    CPDictionary _elements;
    CPDictionary _options;
    FormBuilder _form;
    CPTableView tableView;
  }
  -(void)setData:(id)data
  {
    CPLog.debug("data!!!!!!!!!!!!!!!!!!!!!!!!!!"+data.id);
    _json=data;
    [self loadCodecUI:data.id];
    //[_form setData:data];
    //[self setBounds:[_form bounds]];
  }
  
-(id)initWithFrame:(id)frame
  {
    self=[super initWithFrame:frame];
    tableView=[[CPTableView alloc] initWithFrame:frame];
    var idcolumn = [[CPTableColumn alloc] initWithIdentifier:@"title"];
    //[[idcolumn headerView] setStringValue:"Id"];
    [[idcolumn headerView] sizeToFit];
    [idcolumn setWidth:180];
    desc = [CPSortDescriptor sortDescriptorWithKey:@"title" ascending:YES];
    [idcolumn setSortDescriptorPrototype:desc];

    [tableView addTableColumn:idcolumn];
    //var namecolumn = [[CPTableColumn alloc] initWithIdentifier:[CPString stringWithFormat:@"%d", 2]];

    var columnDataView=[ProfileTableDataView new];

    var namecolumn = [[CPTableColumn alloc] init];
    //[[namecolumn headerView] setStringValue:"Started"];
    [[namecolumn headerView] sizeToFit];
    [namecolumn setWidth:320];
    [namecolumn setDataView:columnDataView];

    [tableView addTableColumn:namecolumn];

    [tableView setDataSource:self];
    [tableView setDelegate:self];
    [tableView setTarget:self];
    [tableView setDoubleAction:@selector(doubleClicked)];
    //[tableView setUsesAlternatingRowBackgroundColors:YES];

    [self setDocumentView:tableView];
    option={"id":"id", "type":"string","title":"Codec","group":"picture_settings","unit":"",
      "control":{
        "type":"ComboBox",
        "defaults":"0"
      }
    };
    codecstxt = [CPURLConnection sendSynchronousRequest:[CPURLRequest requestWithURL:@"/api/v1/codec"] returningResponse:nil];
    codecs=[[codecstxt rawString] objectFromJSON];

    var items=[{"key":"please select a video codec","value":"0"}];
    for(var a=0;a<codecs.data.length;a++){
      if(codecs.data[a].type==0)
        items.push({"key":codecs.data[a].longname,"value":codecs.data[a].id});
    }
    option.control.items=items;
    return self;
}
  -(id)init
  {

    _form=[[FormBuilder alloc] initWithFrame:CGRectMake(10, 30, CGRectGetWidth([self bounds]) , CGRectGetHeight([self bounds]))];

    option={"id":"id", "type":"string","title":"Codec","group":"picture_settings","unit":"",
      "control":{
        "type":"ComboBox",
        "defaults":"0"
      }
    };
    codecstxt = [CPURLConnection sendSynchronousRequest:[CPURLRequest requestWithURL:@"/api/v1/codec"] returningResponse:nil];
    codecs=[[codecstxt rawString] objectFromJSON];

    var items=[{"key":"please select a video codec","value":"0"}];
    for(var a=0;a<codecs.data.length;a++){
      if(codecs.data[a].type==0)
        items.push({"key":codecs.data[a].longname,"value":codecs.data[a].id});
    }
    option.control.items=items;
    [self addSubview:_form];
    return self;
  }

  -(void)codecSelectionChanged:(id)sender
  {
    CPLog.debug("selection changed");
    [self loadCodecUI:[sender title]];
    [_form itemSelectionChanged:sender];
    [_form setData:_json];
  }

  -(void)loadCodecUI:(id)codecid
  {
    //var path = [[CPBundle mainBundle] pathForResource:@"encoder.video.libx264.gui"];
    var codec=codecid;
    CPLog.debug("set codec UI id"+codecid);
    for(var i=0;i<codecs.data.length;i++){
      //CPLog.debug(codecs.data[i].longname)
      if(codecs.data[i].longname==codecid){
        codec=codecs.data[i].id;
        CPLog.debug("codec selected "+codecs.data[i].id);
      }
    }
    //[_form init];
    /*
    var codecSelector=[_form buildComboBox:option];
    var itemarray=[codecSelector itemArray];
    for(var a=0;a<[itemarray count];a++){
      menuitem=[itemarray objectAtIndex:a];
      [menuitem setTarget:self];
      [menuitem setAction:@selector(codecSelectionChanged:)];
    }
    */
    var path = [[CPBundle mainBundle] pathForResource:@"UI/encoder.video."+codec+".gui"];
    _data = [CPURLConnection sendSynchronousRequest:[CPURLRequest requestWithURL:path] returningResponse:nil];
    CPLog.debug("raw data"+[_data rawString]);
    try{
      _guiData=[[_data rawString] objectFromJSON];
      //[_form buildFormView:data];
    }catch(err)
    {
      //CPLog.debug("gui error:"+err);
      if(codecid&&codecid!=option.control.items[0].key){
        var path = [[CPBundle mainBundle] pathForResource:@"UI/encoder.video.default.gui"];
        _data = [CPURLConnection sendSynchronousRequest:[CPURLRequest requestWithURL:path] returningResponse:nil];
        _guiData=[[_data rawString] objectFromJSON];
        //[_form buildFormView:data];
      }
    }
    [tableView reloadData];

  }


  - (int)numberOfRowsInTableView:(CPTableView)tabView
  {
    CPLog.debug("- (int)numberOfRowsInTableView:(CPTableView)tabView");
    
    var result=0;
    if(_guiData){
      _guiData.gui.options.unshift(option);
      result=_guiData.gui.options.length;
    }
    CPLog.debug("Gui RowCount="+result);
    return result;
  }

  - (id)tableView:(CPTableView)tabView objectValueForTableColumn:(CPTableColumn)tableColumn row:(int)row
  {
    if([tableColumn identifier]){
      return [CPString stringWithFormat:@"%s", _guiData.gui.options[row][[tableColumn identifier]] ];
      //return [CPString stringWithFormat:@"%s", _guiData.gui.options[row][[tableColumn identifier]] ];
    }else{
      return {"gui":_guiData.gui.options[row], "data":_json};
  }
}
@end
