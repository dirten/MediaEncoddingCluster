
cmake_minimum_required(VERSION 2.6)
project (MEC)

INCLUDE(CTest)

ENABLE_TESTING()

INCLUDE(cmake/WtFindBoost.txt)

SET(MAJOR_VERSION 0)
SET(MINOR_VERSION 0)
SET(PATCH_VERSION 4)
SET(MINOR_PATCH_VERSION 3)
SET(MHIVE_VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}.${MINOR_PATCH_VERSION})
SET(ERLANG_SOURCE ${PROJECT_SOURCE_DIR}/src/erl)
SET(ERLANG_ERTS_VERSION "5.7.2")
ADD_DEFINITIONS(-DMHIVE_VERSION)
set(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
set(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
set(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}.${MINOR_PATCH_VERSION}")
SET(CPACK_PACKAGE_NAME "MediaEncodingCluster")
SET(CPACK_PACKAGE_VENDOR "EsbLab")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY mhive)
#SET(CPACK_GENERATOR "RPM;STGZ;TGZ;TZ;TBZ2" )
#SET(CPACK_GENERATOR "PackageMaker;STGZ;TGZ;TZ;TBZ2" )
IF(WIN32)
  SET(CPACK_GENERATOR "NSIS" )
ELSEIF(APPLE)
  SET(CPACK_GENERATOR "PackageMaker;TGZ;TZ;TBZ2" )
ELSE(WIN32)
  SET(CPACK_GENERATOR "TGZ;TBZ2" )
ENDIF(WIN32)


#SET(BZ2_LIB bz2)

SET(BUILD_SHARED_LIBS OFF)
SET(BUILD_EMBEDDED_LIBS OFF CACHE STRING "Use Embedded Dependency Libraries")
SET(USE_EMBEDDED_MYSQL OFF CACHE STRING "Use Embedded Mysql")

IF(USE_EMBEDDED_MYSQL)
  ADD_DEFINITIONS(-DUSE_EMBEDDED_MYSQL)
ENDIF(USE_EMBEDDED_MYSQL)


# Build Embedded libraries in deps directory
IF(BUILD_EMBEDDED_LIBS)
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/boost.build "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/wt.build "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/ffmpeg.download "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/x264.download "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/mp3lame.download "")




#  MESSAGE("** Downloading erlang runtime")
#  FILE(DOWNLOAD http://erlang.org/download/otp_src_R13B.tar.gz bla/otp_src_R13B.tar.gz)

  MESSAGE("** Building Embedded Libraries, that will take several time")

  FILE(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/deps/stage)
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/boost.build "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/wt.build "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/ffmpeg.build "")
  FILE(APPEND ${PROJECT_SOURCE_DIR}/deps/stage/x264.build "")

# setup to build embedded libraries
  SET(BUILD_EMBEDDED_BOOST ON)
  INCLUDE(${PROJECT_SOURCE_DIR}/deps/stage/boost.build)
  SET(BUILD_EMBEDDED_WT ON)
  INCLUDE(${PROJECT_SOURCE_DIR}/deps/stage/wt.build)
  SET(BUILD_EMBEDDED_FFMPEG ON)
  INCLUDE(${PROJECT_SOURCE_DIR}/deps/stage/ffmpeg.build)
  SET(BUILD_EMBEDDED_X264 ON)
  INCLUDE(${PROJECT_SOURCE_DIR}/deps/stage/x264.build)

# settings for the embedded Library Paths
  SET(BOOST_DIR ${PROJECT_SOURCE_DIR}/deps/stage/boost)
  SET(BOOST_COMPILER gcc41 )
  SET(BOOST_VERSION "1_35" )
#  SET(FFMPEG_DIR ${PROJECT_SOURCE_DIR}/deps/stage/ffmpeg)
  SET(WT_DIR ${PROJECT_SOURCE_DIR}/deps/stage/wt)
  SET(X264_DIR ${PROJECT_SOURCE_DIR}/deps/stage/x264)
ENDIF(BUILD_EMBEDDED_LIBS)

add_subdirectory (src)
add_subdirectory (test)


#INCLUDE(cmake/HiveBuildBoost.txt)
#INCLUDE(cmake/HiveBuildWT.txt)
INCLUDE(cmake/HiveBuildX264.txt)
INCLUDE(cmake/HiveBuildFfmpeg.txt)

	



IF(NOT BUILD_EMBEDDED_LIBS)
SET(ERLANG_DIR ${USERLIB_ROOT} CACHE PATH "Use Erlang in directory")
SET(FFMPEG_DIR ${USERLIB_ROOT} CACHE PATH "Use ffmpeg in directory")
SET(X264_DIR ${USERLIB_ROOT} CACHE PATH "Use x264 codec in directory")
SET(BOOST_DIR /usr CACHE PATH "Boost installation path prefix")
SET(BOOST_COMPILER gcc CACHE STRING "Boost libraries compiler signature")
SET(BOOST_VERSION "1_35" CACHE STRING "Boost libraries version signature")
ENDIF(NOT BUILD_EMBEDDED_LIBS)

ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)




#INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/web DESTINATION ${CMAKE_INSTALL_PREFIX} PATTERN ".svn" EXCLUDE)
#INSTALL(FILES sql/hive-0.0.1.sql DESTINATION sql )
#INSTALL(FILES ${PROJECT_SOURCE_DIR}/setup.xml DESTINATION ${CMAKE_INSTALL_PREFIX}/res )
#INSTALL(FILES ${PROJECT_SOURCE_DIR}/messages.xml DESTINATION ${CMAKE_INSTALL_PREFIX}/res )
##INSTALL(FILES ${MYSQL_DIR}/share/english/errmsg.sys DESTINATION ${CMAKE_INSTALL_PREFIX}/bin )
INCLUDE(CPack)
#INCLUDE(CPackRPM)
#IF(RPMTools_FOUND)
#     RPMTools_ADD_RPM_TARGETS(testrpm)
#  ENDIF(RPMTools_FOUND)


